package com.niit.furnisets.dao;

import java.util.List;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.EnableTransactionManagement;
import org.springframework.transaction.annotation.Transactional;

import com.niit.furnisets.model.Products;


@Repository("productDAO")
@EnableTransactionManagement
public class ProductsDAOImpl implements ProductsDAO {
	
	@Autowired
	private SessionFactory sessionFactory;
	
	

	public SessionFactory getSessionFactory() {
		return sessionFactory;
	}

	public void setSessionFactory(SessionFactory sessionFactory) {
		this.sessionFactory = sessionFactory;
	}

	
	@Transactional
	public void addProduct(Products prod) {
		Session session = sessionFactory.getCurrentSession();
		System.out.println(prod);
		session.saveOrUpdate(prod);
	}

	@Transactional
	public void updateProduct(Products prod,int id) {
		System.out.println("Product ID" + prod.getId());
		Session session = sessionFactory.getCurrentSession();
		Products prod1 = (Products)session.get(Products.class, id);
		prod1.setProductName(prod.getProductName());
		prod1.setPrice(prod.getPrice());
		prod1.setQuantity(prod.getQuantity());
		prod1.setCatagory(prod.getCatagory());
		prod1.setSubCatagory(prod.getSubCatagory());
		prod1.setFurtherCatagory(prod.getFurtherCatagory());
		prod1.setImage(prod.getImage());
		prod1.setDescription(prod.getDescription());
		session.update(prod1);
		System.out.println(prod1.getCatagory());
		
	}
	
	@Transactional
	public void deleteProduct(int id) {
		Session session = sessionFactory.getCurrentSession();
		Products prod = (Products)session.get(Products.class, id);
		session.delete(prod);
		
	}

	@SuppressWarnings("unchecked")
	@Transactional
	public List<Products> getAllProducts() {
		Session session = sessionFactory.getCurrentSession();
		return session.createQuery("from Products").list();
	}

	@Transactional
	public Products getProductById(int id) {
		Session session = sessionFactory.getCurrentSession();
		return (Products) session.get(Products.class, id);
	}

	@Override
	public Products getProductByCatagory(String catagory) {
		Session session = sessionFactory.getCurrentSession();
		return (Products) session.createQuery("FROM Products WHERE catagory = :cat")
                .setParameter("cat", catagory)
                .uniqueResult();
	}
	
//	@SuppressWarnings("unchecked")
//	@Transactional
//	public List<Products> getProductByCatagory(String catagory) {
//		Session session = sessionFactory.getCurrentSession();
//		return session.createQuery("from Products").list();
//	}
//	
	
}